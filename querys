1. Delete duplicate rows (every column) on daily_price table

delete daily_price from daily_price inner join (select min(id) minid, data_vendor_id, symbol_id, price_date, created_date, last_updated_date, open_price, high_price, low_price, close_price, adj_close_price, volume from daily_price group by data_vendor_id, symbol_id, price_date, created_date, last_updated_date, open_price, high_price, low_price, close_price, adj_close_price, volume having count(1) > 1) as duplicates on (duplicates.data_vendor_id = daily_price.data_vendor_id and duplicates.symbol_id = daily_price.symbol_id and duplicates.price_date = daily_price.price_date and duplicates.created_date = daily_price.created_date and duplicates.last_updated_date = daily_price.last_updated_date and duplicates.open_price = daily_price.open_price and duplicates.high_price = daily_price.high_price and duplicates.low_price = daily_price.low_price and duplicates.close_price = daily_price.close_price and duplicates.adj_close_price = daily_price.adj_close_price and duplicates.volume = daily_price.volume and duplicates.minid <> daily_price.id)

2. Select duplicate rows (on every column) on daily_price table

select * from daily_price inner join 
(select min(id) minid, data_vendor_id, symbol_id, price_date, created_date, last_updated_date, open_price, high_price, low_price, close_price, adj_close_price, volume from daily_price group by data_vendor_id, symbol_id, price_date, created_date, last_updated_date, open_price, high_price, low_price, close_price, adj_close_price, volume having count(1) > 1) as duplicates on (duplicates.data_vendor_id = daily_price.data_vendor_id and duplicates.symbol_id = daily_price.symbol_id and duplicates.price_date = daily_price.price_date and duplicates.created_date = daily_price.created_date and duplicates.last_updated_date = daily_price.last_updated_date and duplicates.open_price = daily_price.open_price and duplicates.high_price = daily_price.high_price and duplicates.low_price = daily_price.low_price and duplicates.close_price = daily_price.close_price and duplicates.adj_close_price = daily_price.adj_close_price and duplicates.volume = daily_price.volume and duplicates.minid <> daily_price.id);


3. Delete all duplicates that have same price date on daily_price table

delete daily_price from daily_price inner join 
(select min(id) minid, data_vendor_id, symbol_id, price_date from daily_price group by data_vendor_id, symbol_id, price_date having count(1) > 1) as duplicates on (duplicates.data_vendor_id = daily_price.data_vendor_id and duplicates.symbol_id = daily_price.symbol_id and duplicates.price_date = daily_price.price_date and duplicates.minid <> daily_price.id);


4. Delete all duplicates on same price date for clean_prices table

delete clean_prices from clean_prices inner join 
(select min(id) minid, symbol_id, price_date from clean_prices group by symbol_id, price_date having count(1) > 1) as duplicates on (duplicates.symbol_id = clean_prices.symbol_id and duplicates.price_date = clean_prices.price_date and duplicates.minid <> clean_prices.id);

5. Select all duplicates on same price date for clean_prices table

select * from clean_prices inner join 
(select min(id) minid, symbol_id, price_date from clean_prices group by symbol_id, price_date having count(1) > 1) as duplicates on (duplicates.symbol_id = clean_prices.symbol_id and duplicates.price_date = clean_prices.price_date and duplicates.minid <> clean_prices.id);


6. Select duplicate rows?

select * from daily_price where id NOT IN (SELECT MIN(id) FROM daily_price)

7. looks at days, and their count of rows (helps to identify duplicates)

select price_date, count(*) from daily_price GROUP BY price_date;
select price_date, count(*) from cleaned_price GROUP BY price_date;

8. Look at duplicate rows by vendor

select price_date, count(*) from daily_price where data_vendor_id = '1' GROUP BY price_date HAVING count(*) > 504;

9. Clear a table

TRUNCATE TABLE clean_prices where data_vendor_id = '2';

10. Delete duplicate symbols
select * from symbol inner join
(select min(id) minid, ticker from symbol group by ticker having count(1) > 1) as duplicates on (duplicates.ticker = symbol.ticker and duplicates.minid <> symbol.id);

delete symbol from symbol inner join
(select min(id) minid, ticker from symbol group by ticker having count(1) > 1) as duplicates on (duplicates.ticker = symbol.ticker and duplicates.minid <> symbol.id);


11. Find days that yahoo has data but quandl does not

#NOT WORKING YET
select price_date from daily_price where data_vendor_id = '1' and NOT EXISTS ( select price_date from daily_price where data_vendor_id = '2');


12. Create maco_results
        column_str = """stock_1, stock_2, stock_3, stock_4, start_date, end_date, short_mavg
        long_mavg, universe_type, trades, start_capital, end_capital"""

CREATE TABLE `maco` (
  `id` int NOT NULL AUTO_INCREMENT,
  `ticker_1` varchar(32) NULL,
  `ticker_2` varchar(32) NULL,
  `ticker_3` varchar(32) NULL,
  `ticker_4` varchar(32) NULL,
  `created_date` datetime NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `short_mavg` int NOT NULL,
  `long_mavg` int NOT NULL,
  `universe_type` varchar(32) NOT NULL,
  `trades` int NOT NULL,
  `start_capital` decimal(19,2) NOT NULL,
  `end_capital` decimal(19,2) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

CREATE TABLE `maco_backtest` (
  `id` int NOT NULL AUTO_INCREMENT,
  `maco_id` int NOT NULL,
  `ticker_1` varchar(32) NULL,
  `ticker_2` varchar(32) NULL,
  `ticker_3` varchar(32) NULL,
  `ticker_4` varchar(32) NULL,
  `created_date` datetime NOT NULL,
  `price_date` date NOT NULL,
  `holdings` decimal(19,2) NULL,
  `cash` decimal(19,2) NULL,
  `total` decimal(19,2) NULL,
  `returns` decimal(19,2) NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

        column_str = """ticker_1, ticker_2, ticker_3, ticker_4, created_date, price_date, holdings,
        cash, total, returns"""

